/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from 'react'
import { useGLTF, useTexture, shaderMaterial } from '@react-three/drei'
import { extend, useFrame } from '@react-three/fiber'
import * as THREE from 'three'
import { easing } from 'maath'

export default function ChocolateModel(props) {
  const { nodes, materials } = useGLTF('/chocolate.glb')
  const [hovered, hover] = useState(false)
  const ref = useRef()
  const [texture1, texture2, dispTexture] = useTexture(['tex1.png', 'tex2.png', '13.jpg'])
  texture1.flipY = false
  texture2.flipY = false

  useFrame((state, delta) => {
    easing.dampC(state.scene.background, hovered ? '#42322E' : '#E4B03C', 0.25, delta)
    ref.current.dispFactor = THREE.MathUtils.lerp(ref.current.dispFactor, hovered ? 1 : 0, 0.075)
  })

  function setBG(value) {
    document.body.style.color = hovered ? '#42322E' : '#E4B03C'
    hover(value)
  }

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_4.geometry}
        material={materials['Material.002']}
        position={[0, 0.545, 0.12]}
        rotation={[0, 1.258, -2.117]}
        scale={[-0.571, -0.026, -0.359]}
      />
      <mesh
        onPointerEnter={(event) => setBG(true)}
        onPointerLeave={(event) => setBG(false)}
        castShadow
        receiveShadow
        geometry={nodes.Cube.geometry}
        position={[0.625, 1.009, -0.296]}
        rotation={[-0.088, 0, Math.PI]}
        scale={[0.555, 1, 0.05]}>
        <imageFadeMaterial ref={ref} tex={texture1} tex2={texture2} disp={dispTexture} toneMapped={false} />
      </mesh>
    </group>
  )
}

useGLTF.preload('/chocolate.glb')

export const ImageFadeMaterial = shaderMaterial(
  {
    effectFactor: 1.2,
    dispFactor: 0,
    tex: undefined,
    tex2: undefined,
    disp: undefined
  },
  ` varying vec2 vUv;
    void main() {
      vUv = uv;
      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
    }`,
  ` varying vec2 vUv;
    uniform sampler2D tex;
    uniform sampler2D tex2;
    uniform sampler2D disp;
    uniform float _rot;
    uniform float dispFactor;
    uniform float effectFactor;
    void main() {
      vec2 uv = vUv;
      vec4 disp = texture2D(disp, uv);
      vec2 distortedPosition = vec2(uv.x + dispFactor * (disp.r*effectFactor), uv.y);
      vec2 distortedPosition2 = vec2(uv.x - (1.0 - dispFactor) * (disp.r*effectFactor), uv.y);
      vec4 _texture = texture2D(tex, distortedPosition);
      vec4 _texture2 = texture2D(tex2, distortedPosition2);
      vec4 finalTexture = mix(_texture, _texture2, dispFactor);
      gl_FragColor = finalTexture;
      #include <tonemapping_fragment>
      #include <colorspace_fragment>
    }`
)

extend({ ImageFadeMaterial })
